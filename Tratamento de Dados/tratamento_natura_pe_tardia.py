def tratamento():
	# -*- coding: utf-8 -*-
	"""Tratamento_Natura-PE-Tardia.ipynb
	
	Automatically generated by Colaboratory.
	
	Original file is located at
	    https://colab.research.google.com/drive/19c1i6KpaN81W3Beg8bASFNnjCK1Fgwl4
	
	# **Tratamento NATURA PE TARDIA**
	Premissas: Arquivos com 1800 no nome
	
	## Inicialização
	"""
	
	mover=True
	tem_especial=True
	
	import pandas as pd
	import numpy as np
	import os
	import datetime
	import time
	
	from google.colab import drive
	drive.mount('/content/drive')
	
	carteira='Natura PE Tardia'
	
	#Definindo diretórios
	diretorio_tratamento=r'/content/drive/MyDrive/Processamentos/Tratamento/'
	diretorio=diretorio_tratamento + carteira + '/'
	output='/'.join(['/content/drive/MyDrive/Pronto pra upload',str(datetime.date.today().year),str(datetime.date.today().month).zfill(2),datetime.date.today().strftime('%d-%m-%Y')])+'/'
	os.makedirs(output,exist_ok=True)
	ingestion=diretorio+'ingestion/'
	processedfiles=diretorio+'processedfiles/'
	os.makedirs(ingestion,exist_ok=True)
	os.makedirs(processedfiles,exist_ok=True)
	
	#Nome do arquivo de saída com caminho
	csv_saida=output+'late_natura-peru-tardia_'+str(datetime.date.today().strftime('%d-%m-%Y'))+'.csv'
	
	num_arquivo=1
	
	while len(os.listdir(ingestion))!=num_arquivo:
	  time.sleep(5)
	print(os.listdir(ingestion))
	
	#Identificando as planilhas EXCLUSIVA e ESPECIAL
	for arquivo in os.listdir(ingestion):
	    if arquivo.find('1800')>=0 or arquivo.find('1801')>=0:
	      nome_tardia=arquivo
	      arquivo_tardia=ingestion+arquivo
	arquivo_tardia
	
	#Carregando Planilhas
	df_tardia=pd.read_excel(arquivo_tardia,dtype=object)
	tardia=df_tardia.copy()
	
	"""## Início das Transformações
	
	### Capitalizar 'Nombre de la Persona'
	"""
	
	#Capitalizando coluna de Nomes
	tardia['Nombre de la Persona']=tardia['Nombre de la Persona'].str.title()
	tardia['Nombre de la Persona']
	
	# Remover espaços duplos (TRIM)
	coluna='Nombre de la Persona'
	for i in range(len(tardia)):
	  split=tardia.loc[i,coluna].split(' ')  #aplicar split por ' '
	  split=[s for s in split if s!='']  #remover strings vazias do array
	  tardia.loc[i,coluna]=' '.join(split) #juntar strings de split sem os ''
	
	"""### Tratando '% Descuento Saldo Original' para ficar que nem no excel em %"""
	
	#Colocando % na coluna de Descontos e multiplicando por 100
	tardia['% Descuento Saldo Original']=tardia['% Descuento Saldo Original'].astype(float)*100
	tardia['% Descuento Saldo Original']=tardia['% Descuento Saldo Original'].astype(int)
	tardia['% Descuento Saldo Original']=tardia['% Descuento Saldo Original'].apply(lambda x: str(x)+'%')
	tardia['% Descuento Saldo Original']
	
	"""### Tratando datas da coluna 'Fecha nasc'"""
	
	#Tratando a coluna de Fecha Nasc que tem datas em formato de número
	coluna='Fecha nasc'
	# tardia[coluna]=tardia[coluna].apply(lambda x:'' if str(x)=='-' else x)
	data=np.array(tardia[coluna])
	for i in range(len(data)):
	  if str(data[i]).find('/')==-1 and str(data[i]).find('-')==-1:
	      data[i]=str(pd.to_datetime('1900-01-01')+pd.Timedelta(days=data[i]-2))
	tardia[coluna]=data
	tardia[coluna]=tardia[coluna].apply(lambda x: str(x)[:10])
	#Tratando as datas que estão com - para /
	x=np.array(tardia[coluna])
	print(x)
	for i in range(len(x)):
	  if x[i].find('/')==-1:
	    x[i]=str(x[i])[-2:]+'/'+str(x[i])[5:7]+'/'+str(x[i])[:4]
	tardia[coluna]=x
	#Datas que são - viram -//- depois das operações acima, substituir essas datas por vazio
	tardia[coluna]=tardia[coluna].str.replace('-//-','')
	tardia[coluna]
	
	"""### Tirando o horário das colunas de data e convertendo pro formato brasileiro"""
	
	#Tirando horário nas colunas de data
	print(tardia.select_dtypes(include='datetime').columns.tolist())
	for coluna in tardia.select_dtypes(include='datetime').columns.tolist():
	    tardia[coluna]=tardia[coluna].apply(lambda x: str(x)[:10])
	    tardia[coluna]=pd.to_datetime(tardia[coluna])
	    tardia[coluna]=tardia[coluna].dt.strftime('%d/%m/%Y')
	
	tardia[['Fecha Pedido', 'Fecha Vcto', 'Fecha Saldo', 'Fecha Saldo Corregido']]
	
	"""### Remover colunas 'Estructura Comercial','Estructura Comercial Padre'"""
	
	#Apagando colunas de Estrutuctura Comercial
	tardia=tardia.drop(['Estructura Comercial','Estructura Comercial Padre'],axis=1)
	
	"""### Remover DNI nulos, zeros e - e preencher com 8 dígitos"""
	
	#Tratando DNI nulo e hífens
	print('Total de linhas antes:',len(tardia))
	nulos=np.array(tardia['DNI'].notnull())
	hifens=np.array(tardia['DNI']!='-')
	filtro=nulos*hifens
	print('Total de linhas diferente de - e nulo:',filtro.sum())
	tardia=tardia[filtro]
	#Formatando DNI com 8 dígitos
	tardia['DNI']=tardia['DNI'].astype(object)
	tardia['DNI']=tardia['DNI'].apply(lambda x: str(x).zfill(8))
	#Removendo zeros
	tardia=tardia[tardia['DNI']!='00000000']
	print('Total de linhas depois de filtrar zeros:',len(tardia))
	tardia.sort_values('DNI').head(3)
	
	"""### Adicionando coluna 'MONEDA'"""
	
	#Criando coluna MONEDA
	tardia['MONEDA']='PEN'
	
	"""### Remover 'No Pedido' duplicados"""
	
	#Remover Pedidos duplicados
	print(len(tardia))
	tardia=tardia.drop_duplicates(subset='No Pedido')
	print(len(tardia))
	
	"""### Arredondando e formatando colunas de números para 2 casas decimais"""
	
	#Formatar números para 2 casas decimais
	colunas=['Original', 'Saldo','Saldo Corregido','Monto mínimo a pagar Campaña','Interés/multa Acumulados (100% descuento)','Monto Descuento Saldo Original','Total descuentos']
	for coluna in colunas:
	    tardia[coluna]=tardia[coluna].astype(float)
	    tardia[coluna]=tardia[coluna].round(2)
	    tardia[coluna]=tardia[coluna].map('{:.2f}'.format)
	
	"""###Tratamento de Email"""
	
	#Aplicando lower e strip na coluna de email
	coluna_email='Correo Electrónico'
	tardia[coluna_email]=tardia[coluna_email].str.lower().str.strip()
	#Apagando emails não validados
	tardia[coluna_email].loc[tardia[coluna_email].str.find('@')<0]=''
	tardia['num @']=tardia[coluna_email].str.len()-tardia[coluna_email].str.replace('@','').str.len()
	filtro=tardia['num @']!=1
	tardia.loc[filtro,coluna_email]=''
	tardia.drop('num @',axis=1,inplace=True)
	
	"""###Tratamento dos números de telefone"""
	
	# Fazendo coerce com Celular e Telefone
	telefone = np.array(tardia['Teléfono Persona'])
	celular = np.array(tardia['Numero Celular'])
	celular_nao_nulo = tardia['Numero Celular'].notnull()
	telefone[celular_nao_nulo] = celular[celular_nao_nulo]
	tardia['Numero Celular'] = telefone
	tardia['Numero Celular']=tardia['Numero Celular'].str.replace(' ','')
	# Tratando números com mais de 9 dígitos e 8 dígitos
	tardia['Numero Celular'] = tardia['Numero Celular'].apply(
	    lambda x: '9' + str(x) if len(str(x)) == 8 else (str(x)[-9:] if len(str(x)) > 9 else x))
	# Apagar números que não começam com 9
	tardia['Numero Celular'] = tardia['Numero Celular'].apply(lambda x: '' if str(x)[0] != '9' else x)
	# Apagar números com menos de 8 dígtios
	filtro = np.char.str_len(np.char.array(tardia['Numero Celular'])) < 8
	
	"""## Exportando"""
	
	tardia.to_csv(csv_saida,index=False)
	
	"""## Movendo Carteira Tardia"""
	
	if mover:
	  arquivos=[nome_tardia]
	  for arquivo in arquivos:
	    try:
	      os.rename(ingestion + arquivo, processedfiles + arquivo)
	    except:
	      os.remove(processedfiles + arquivo)
	      os.rename(ingestion + arquivo, processedfiles + arquivo)